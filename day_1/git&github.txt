Git :   
	distributed version control or source control tool
	by Linux community
	mostly used by developers

	why : We need it

	how it works : git store snapshot of codes 

source control : 
	like the surveillance system for the source code
	means you or someone can keep track source code

version control :
	Records changes in the code
	tracking the changes in source code

	distributed version control :
		we can do it in local machine and can connect to remote repository. clone or 

Git states: 
	changed ----> Modified			----> staged 					-----> committed 

	changed ----> Modified (changed files) ----> staged (git marked files for next snapshot) -----> committed (snapshot taken)

origin : remote server
master / main / develop : branches

.gitignore: folder/ , *.log ,


git log <branch> --decorate --oneline --graph






Practical : 

git init
	--> initialize the git 
git status 
	--> shows changed and status of repo  (Modified or staged or committed)
git log 
	--> changes in code
git log -1 
	--> last commit log
git log -1 --stat
	--> files and No. of lines changed in last commit

IMP :

git log -1 -p
	--> actual code changes in each files for last commit



1. git clone url_of_Repo

1.1. to remove the un-tracked changed
 git checkout file.txt/.


2. git add .   or git add file.txt

	3. git restore --staged file.txt   ( to restore the change in staged state )

	4. git restore file.txt            (to clear the changes in file)

5. git commit -m "message"

6. git add and commit 
	> git commit -am "message"

7. git push origin master/main

8. to remove the un-tracked changed
	> git checkout file.txt

9. to go back commit from current head (to go two commits back)
	> git checkout HEAD~2




git branching / checkout: 

new branch :   		>  git branch develop

switch to branch :      
	>  git checkout develop
or	>  git switch develop

going to any commit :
	> git checkout 'hash of Target commit'

creating new branch and switching :
	> git checkout -b 'test'
	> git switch -c 'test'

deleting branch: ( from other branch )
	> git branch -d 'branchToDelete' 

go to master/main branch : (To merge )

>  git merge develop


Branching

Git branch Create branch:
	$ git branch 
List Branch:
	$ git branch --list 
Delete a Branch:
	$ git branch -d 
Delete a remote Branch:
	$ git push origin -delete 
Rename Branch:
	$ git branch -m


Git checkout
Switch between branches in a repository.
Switch to a particular branch:
> $ git checkout branch

to see changes in branch
	> git diff branchName
	> git diff --staged

	changes of two commits
	>git diff HashOfOneCommit HashOfSecCommit
	>git diff oldHash..NewHash


Amend :
	to change/update previous commits

	> git add .
	> git commit --amend
	or
	> git commit --amend -m "new message for last commit msg"


Conflict : (sample file/line in diff branch)

	two branches main and sample have same code
	 after  main makes one commit change one lile
	 sample commits by changing same file 

	while merging we get conflict error

  Fix conflict :
  		we can reslove conflict by manually changing files 


GIT STASH :

git Stash : (to go to last working commits)
 	> git stash 
 	> git stash -m "message"

(list saved stashed in disk)
 	> git stash --list
 	> git stash show {indx=0}

 ( to go to stashed saved changes. applies last stashed change. and pop from list)
 	> git stash pop 
 	> git stash pop --index 1

 (applies last stashed change. but stash saved (Not poped) in stash list)
 	> git stash apply 

 (to delete stash list item)
 	> git stash drop stash@{N}   ex:stash@{2}  

 (to clear list ) 
 	> git stash clear

 (to stash only one file)
 	> git stash -- home.html

 (to see chaneges in stash) > git stash show
 	> git stash show stash@{0}

(to stash only modified changes not stagged files)
 	> git stash --keep-index

(to stash untracked files also)
	> git stash --include-untracked

(store changes into separate branch)
	> git stash branch <Branch Name>



Git Restore :

	(restore unstaged changes)
		> git restore file.txt
		> git restore same as > git restore --worktree

	(restore staged changes)
		> git restore --staged file.txt

	(to restore both staged and modified changes. )
		> git restore --staged --worktree .

	(to restore file till last commit)
		> git restore --source='HashOfCommit' file.txt
	  ex.> git restore --source=2d34303 .
	  (last commit)
	  	> git restore --s=HEAD~1 .


Git Reset : 
	(to change the state of HEAD, changes commit history)

	(to remove file from stagging , changes not discarded) 
		> git reset {hash of commit}

	(undo last commit and changes are in stagged state)
		> git reset --soft HEAD~1

	(undo last commit and changes are in unstage/working state)
		> git reset --mixed HEAD~1

	(discard current changed)
		> git reset --hard {commit hash}

	(reset last commit)
	> git reset HEAD~1 
	> git reset --hard HEAD~1 


Git Revert :
	( to avoid conflic by git reset )

	Git undo commit
		> git revert 0ec8bab


Git Alise : (shortform for commands) 
	> got to root dir > nano .gitconfig

	add 
	[alias]
		st = status
		one = log --oneline
		hist = log -1 -p
		stat = log -1 --stat
		ch = checkout

	or by command
		> git config --global alias.ch checkout

Git Rebase : 
	using merge it will create new merge commit it will afect commit history
	using rebase can combine branch without useless commits
	we are changing history

	(to clean the commit history discards merge commits)
		> git rebase branch

	(from other branch main branch)
		> git rebase <other branch>


Git Cherry-pick : (allows to apply only changed that you want to apply)

	to pick target commit form diff branch and add it to working branch.
	takes target commit and places over head of working branch

	> git cherry-pick <targetCommitHash>
	> git cherry-pick <targetCommitHash_1>  <targetCommitHash_2>

(to copy commit from different branch ro main branch)
	> git cherry-pick FirstCommitHash^..LastCommitHash



Collaboration :
	Fork repo in github, clone repo ,
	change request from other than owner is pull request
	owner will reveiw changed and can merge the pull request

	PULL : (fetch + merge)
	fetches changes from remote repo to local repo ( to stay upto date with remote repo )
		 > git pull
		 > git pull origin main

		 > git pull -all ( all branched )

		(pull changes from main put into feature branch in locally)
		 	> git pull origin main:feature 