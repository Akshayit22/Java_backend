Java Fundamentals  :

	java is high level, object Oriented Programming lang. by james gosling in 1995
	used in server, apps, games, databases, jsp, JDBC.

	.java file ------> javac sample.java  ---------> java sample
	(extension)     (to compile bytecode)   (to execute class file)

	compiler --> bytecode --> can be executed on any machine  (platform independent)

	portable, robust, secure, concurrent, Multithreaded, Archthictural neutral

	JDK contains JRE ->
		JRE contains JDK -> 
			JDK with tools, compiler and libraries.
	
Recap :
basic program, console input by arguments

Variables : local / instance / static

datatype : 
	primitive    : boolean,char,byte,short,int,long,float,double
	Non-primitive: string, array

operators : 
	unary :		 ++x, x++, y--, --y, !a
	arithmetic :     +, -, *, /, %
	shift : 	<< (left shift) , >> (rigth shift)
	logical : 	&& , || , !
	ternary :       (a<b)?a:b
	Assignment :	+= , -= , /= , *= , %= 

Control Flow Statements :
	decision stat : 
		1. if Statements
		2. Switch Statements
	loop :
		1. for(initilization; condition, increament)
		2. while(condition)
		3. do{}while(condition)
		4. for-each loop
	Jump Statements : 
		1. break; (always used in loops)
		2. continue; (to skip that iteration)

Methode : type, body , datatype 
Constructor : default and parameterized, Constructor chaining	


Object Oriented Programming :
	object , class 
	inheritance - 
	polymorphism
	Abstraction
	Encapsulation

Arrays : 
	collection of similar type of data

Collection : 
	set,hashmap,stack,queue, linkedlist,ArrayList

Java I/O : fileWritter , fileReader , file , scanner

Stream : sequence of data
	System.in
	System.out
	System.err

Multithreading & Concurrency : 
	extending thread class or runnable interface, thread priority,sleep,synchronized



Java Memory Management and Garbage Collection:
	allocation and de-allocation of objects
	java does it automatically using 
	Garbage collector (which finds and deletes unreachable object at runtime)

	objects live in Heap Memory
	unreferenced objects : 1. pointing to null
							2. assigned reference to another object. obj1 = obj2 ,(obj1 avail fro Garbage Collection)
							3. anonymous object ,--> new Person();
	finalize() -> cleanup , gc() --> invoke Garbage collector

Exception Handling :
	to handle runtime errors,

Java Streams : 
	InputStrams , outputStreams
	
	Stream<String> filtered = l.stream().filter(s-> s == "akshay" || s == "amar");
    filtered.forEach(s -> System.out.println(s));

Java Generics:
	user-defined types
	adv. 1.Type-safty 2.Type-casting not required 3.compile-yime checking
	List<String> l = new ArrayList<String>();

Lambda Expressions: (java SE 8)
	it helps to iterate, filter and extract data from collection with less coding.

Java Annotations:

Design Patterns in Java:

Asyc Programming:

Java Database Connectivity (JDBC)